[{"name":"app.R","content":"\nlibrary(shiny)\nlibrary(ggpubr)\nlibrary(factoextra)\nlibrary(data.table)\nlibrary(stringr)\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(ggstream)\nlibrary(plotly)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(pheatmap)\n\nload(\"~/vwsongs/data/ClusteringAuto.RData\")\nload(\"~/vwsongs/data/nextsongs.RData\")\nload(\"~/vwsongs/data/album_per.RData\")\nload(\"~/vwsongs/data/setlistalbums.RData\")\nload(\"~/vwsongs/data/albumcolors.RData\")\nload(\"~/vwsongs/data/given.RData\")\nload(\"~/vwsongs/data/vwd.RData\")\nload(\"~/vwsongs/data/song_shows.RData\")\nload(\"~/vwsongs/data/overlapmap.RData\")\nload(\"~/vwsongs/data/deepcutsmap.RData\")\n\n\nsimmat <- read.csv(\"~/vwsongs/data/similaritymatrixdc.csv\",check.names=FALSE)\nrownames(simmat) <- colnames(simmat)\nlist_shows <- sort(unique(setlist_albums_songs$city.y))\ncolnames(given) <- unique(vwd$sets)\nrownames(given) <- colnames(given)\ngiven <- given[,order(colnames(given))]\ngiven <- given[order(rownames(given)),]\n\nlist_clusters <- function(simmat,song,clust,clustassign){\n  \n  l <- names(clustassign[[clust]][which(clustassign[[clust]] == clustassign[[clust]][which(names(clustassign[[clust]]) == song)])])\n  \n  l <- l[-which(l==song)]\n  \n  l <- as.data.table(matrix(l, nrow = 4, byrow = TRUE))\n  \n\n  \n  return(l)\n}\n\nplot_clusters <- function(kmeans_result,simmat,clust){\n  fviz_cluster(kmeans_results[clust][[1]], data = simmat, \n               ellipse.type = \"convex\", \n               ggtheme = theme_bw()\n  )}\n\nget_next_desc <- function(song,song_next_per){\n  return(song_next_per[[song]])\n}\n\nget_streamgraph <- function(album_percentages){\n  ggplot(album_percentages, aes(x = num, y = percentage, fill = album)) +\n    geom_stream( bw =0.6,color = 1, lwd = 0.3)+\n    scale_fill_manual(values = c(unique(album_percentages$col)[1:4],unique(album_percentages$col)[6],unique(album_percentages$col)[5])) +\n    theme_void()\n}\n\nget_piechart <- function(shows,setlist_albums_songs){\n  \n  city_songs <- setlist_albums_songs %>%\n    filter(\n      city.y %in% shows\n    ) %>%\n    select(\n      album, sets, col\n    )\n  \n  sum_songs <- city_songs %>%\n    group_by(\n      album\n    ) %>%\n    mutate(\n      n_album = n(),\n      album_per = round(n_album / nrow(city_songs),2)\n    ) %>%\n    ungroup() %>%\n    group_by(sets) %>%\n    mutate(\n      num_song = n()\n    ) %>%\n    ungroup() %>%\n    mutate(\n      a_label = paste(album,\", \",album_per*100,\"%\",sep = \"\"),\n      s_label = paste(sets,\", \",num_song,sep = \"\")\n    )\n  \n  a <- sum_songs$album\n  a_p <- sum_songs$a_label\n  s_n <- sum_songs$s_label\n  b <- sum_songs$sets\n  c<- sum_songs$num_song\n  \n  l<- rbind(unique(cbind(a,a_p)),cbind(b,s_n))\n  \n  p <- c(rep(\"\",length(unique(a))),a)\n  \n  num_albums <- unique(cbind(sum_songs$album,sum_songs$n_album))[,2]\n  \n  v <- as.numeric(c(num_albums,sum_songs$num_song))\n  \n  i <- c(unique(a),paste(a,\"-\",b,sep = \"\"))\n  \n  a <- na.omit(as.data.frame(c(l[1:length(unique(a))],p[length(unique(a))+1:length(p)])))\n  colnames(a) <- \"album\"\n  \n  c <- left_join(a,albumcolors,by=\"album\")\n  \n  h <- paste(\"<b>\",l,\"<\/b><br>\",ifelse(l %in% a,paste(a_p*100,\"%<br>\",a_n,\" times\"),\"\"))\n  \n  argh <- unique(as.data.frame(cbind(l,p,v,i,c)))\n  \n  argh <- arrange(argh,desc(v))\n  \n  fig1 <- plot_ly(argh)\n  \n  fig1 <- fig1 %>% add_trace(\n    labels = ~a,\n    parents = ~p,\n    values = ~v,\n    type = 'sunburst',\n    insidetextorientation='radial',\n    branchvalues='total',\n    hovertemplate = ~a_p\n  ) %>%\n    layout(\n      extendsunburstcolors = TRUE,\n      colorway = ~col)\n  \n  fig1\n  \n  \n}\n\nget_heatmap <- function(given){\n  colnames(given) <- str_trunc(colnames(given),12)\n  \n  rownames(given) <- str_trunc(rownames(given),12)\n  pheatmap(given,\n           color = colorRampPalette(c(\"white\", \"blue\", \"darkblue\"))(50), # Gradient colors\n           display_numbers = TRUE, # Show similarity values\n           number_color = \"black\") # Number color\n}\n\npercent_given <- function(given,song1,song2){\n  return(round(given[which(colnames(given) == song1),which(colnames(given) == song2)],2))\n}\n\nall_percent_given <- function(given,song){\n  return(cbind(rownames(given),t(round(given[which(colnames(given) == song),],2))))\n}\n\nget_setlist <- function(show,song_show_wide) {\n  \n  song_show_wide %>%\n    select(\n      all_of(show)\n    ) %>%\n    return() \n  \n  #return(unname(unlist(song_show_wide[show])))\n  \n}\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n  \n  navset_tab(\n    \n#####\n    nav_panel(\"Clusters\",\n    \n\n    titlePanel(\"KMeans Clustering\"),\n\n \n    sidebarLayout(\n        sidebarPanel(\n          \n            h5(\"K-means clustering is a method of grouping similar items into clusters. I used it to analyze which songs appeared together in setlists. If a song was played, the algorithm identifies other songs that were most likely also played.\"),\n            h6(\"(If you choose a song that is basically always played like Ice Cream Piano, then you will get the other songs that were also basically always played, so I recommend choosing some \\\"deeper cuts\\\"!)\"),  \n          \n            sliderInput(\"k\",\n                        \"Number of clusters:\",\n                        min = 2,\n                        max = 7,\n                        value = 2),\n            selectInput(\"ksong\", \"Choose a song to see the cluster\",\n                        choices = colnames(simmat))\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"kPlot\"),\n           textOutput(\"ktext\"),\n           tableOutput(\"clusttable\")\n        )\n    )\n  ),\n#####\n  \n  nav_panel(\"Next Song\",\n            \n      titlePanel(\"Which Song is Next?\"),\n      sidebarLayout(\n      sidebarPanel(\n            \n            selectInput(\"nsong\", \"Choose a song to see what songs usually come next\",\n                        choices = colnames(simmat))\n      ),\n      mainPanel(\n        tableOutput(\"nextsong\")\n      )\n            )\n  ),\n  \n#####\n  nav_panel(\"Streamgraph\",\n            \n            titlePanel(\"Streamgraph\"),\n            \n            sidebarLayout(\n              sidebarPanel(\n                \n                h5(\"This is a streamgraph of how many songs from each album they played at each show over time. You can see that they were pretty consistent.\")\n                \n              ),\n              \n              mainPanel(\n                plotOutput(\"sgplot\")\n              )\n              \n            )\n        \n            ),\n  \n  \n#####\nnav_panel(\"Album Percentages\",\n          \n          titlePanel(\"What Album Percent Breakdown Did You See?\"),\n          sidebarLayout(\n            \n            sidebarPanel(\n              h5(\"Check which shows you went to, and the pie chart will update to show you how many songs from each album they played, and the overall percentage.\"),\n            checkboxGroupInput(\"cbperc\", \"Shows:\", list_shows,selected = \"Amsterdam\")\n            ),\n            mainPanel(\n              \n              plotlyOutput(\"percplot\")\n              \n            )\n          )\n          \n          ),\n\n#####\nnav_panel(\"Two Songs\",\n          \n          titlePanel(\"Given X, What Percent of the Time Did They Play Y?\"),\n          \n          sidebarLayout(\n            \n            sidebarPanel(\n              h5(\"Choose two songs. This will give you the percent of time that the second song was played given they played the first song.\"),\n              h6(\"(If you choose a song that always played, such as Ice Cream Piano, you will get back the overall percentage of the time that song was played throughout the tour.)\"),\n              selectInput(\"fsong\", \"First Song\",\n                          choices = colnames(simmat)),\n              selectInput(\"ssong\", \"Second Song\",\n                          choices = colnames(simmat)),\n              checkboxInput(\"allsong\",\"Check this box if you want to see all song percentages given the first song\")\n            ),\n            mainPanel(\n              tableOutput(\"fstable\")\n            )\n            \n            \n          )\n          \n          ),\n#####\nnav_panel(\"Heatmap\",\n          \n          titlePanel(\"Heatmap of Song Occurances\"),\n          \n              h5(\"This is a big graph. I know. The higher the number, the more the two songs were played together. Given the song on the row played, this is the percentage of the time the song on the column played.\"),\n          h6(\"(Sorry about the order of the songs, it is based on a clustering algorithm.)\"),\n           \n            \n              plotOutput(\"heatmap\", height = \"900px\")\n            \n          \n          \n          ),\n\n#####\n\nnav_panel(\"Dendrogram\",\n          \n          titlePanel(\"Dendrogram of Songs\"),\n          \n              h5(\"A dendrogram is a tree-like chart that shows how items are grouped based on their similarity. In my analysis, I used the order of songs in each setlist to group them into clusters. Each of the 6 groups I created represents an \\\"act\\\" in the setlist, with songs in the same group being likely to appear together during a show.\"),\n              \n              imageOutput(\"dend\")\n          \n          \n          ),\n\n#####\nnav_panel(\"Setlists\",\n          \n          titlePanel(\"Setlists\"),\n          \n          sidebarLayout(\n            \n            sidebarPanel(\n              \n              h5(\"Choose which shows you went to and you will be shown the setlists.\"),\n              checkboxGroupInput(\"setshows\", \"Shows:\", list_shows,selected = \"Amsterdam\")\n            ),\n            mainPanel(\n              \n              tableOutput(\"settable\")\n              \n            )\n              \n              \n            )\n          ),\n          \n          \n\n#####\nnav_panel(\"Overlap\",\n          \n          titlePanel(\"Overlap of Shows Map\"),\n          \n          h5(\"This map shows relatively how common your setlist was at your show. If it's blue, there might have been some deeper cuts (see the other map). If it's red, you must have gotten a lot of the hits!\"),\n          h5(\"I took away the festivals, as they were all extremely close to each other, with them only playing their really popular songs. It would have skewed the data.\"),\n          \n          leafletOutput(\"oleaf\")\n          \n          ),\n\n#####\nnav_panel(\"Deep Cuts\",\n          \n          titlePanel(\"Deep Cuts Map\"),\n          \n          h5(\"This map has your show on it if VW played a song that they played less than 5 times for the entire tour. The shows in gold highlight places where they played a song only one time. That song is indicated by an asterisk.\"),\n          \n          leafletOutput(\"dleaf\")\n          \n)\n\n\n#####\n  \n  )\n    \n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$kPlot <- renderPlot({\n      \n      plot_clusters(kmeans_results,simmat,input$k)\n      \n    })\n    \n    output$ktext <- renderText({paste(input$ksong,\":\", sep = \"\")})\n  \n    output$clusttable <- renderTable({\n      \n      list_clusters(simmat,input$ksong,input$k,clustassign)\n      \n    }, colnames = FALSE, bordered = TRUE)\n    \n    output$nextsong <- renderTable({\n      get_next_desc(input$nsong,song_next_per)\n    }, colnames = FALSE)\n    \n    \n    output$sgplot <- renderPlot({\n      \n      get_streamgraph(album_percentages)\n      \n    })\n    \n    output$percplot <- renderPlotly({\n      get_piechart(input$cbperc,setlist_albums_songs)\n    })\n    \n    output$fstable <- renderTable({\n      if(input$allsong){\n        g <- as.data.frame(all_percent_given(given,input$fsong))\n        colnames(g) <- c(\"V1\",\"V2\")\n        g <- g[order(g$V2,decreasing = TRUE),]\n        colnames(g) <- c(\"Song\",paste(\"Percent played given\",input$fsong,\"played\"))\n      }\n      else{\n        g <- percent_given(given,input$fsong,input$ssong)\n        g <- as.data.frame(c(paste(\"Given \",input$fsong,\" played, \", input$ssong,\" played \",g[1]*100,\"% of the time.\", sep = \"\")))\n        names(g) <- \"\"\n      }\n      g\n    })\n    \n    output$heatmap <- renderPlot({\n      get_heatmap(given)\n    })\n    \n    output$dend <- renderImage(\n      {\n        list(src = \"~/vwsongs/data/dendrogram.png\", alt = \"Dendrogram\", width = \"1000px\")}\n      \n      , deleteFile = FALSE\n    )\n    \n    output$settable <- renderTable(\n      \n      {get_setlist(input$setshows,song_show_wide)}\n    )\n    \n    output$oleaf <- renderLeaflet({\n      leaflet(showavgoco) %>% \n        addTiles()  %>% \n        setView( lat=36, lng=-44 , zoom=2) %>%\n        addProviderTiles(\"Jawg.Light\", options = providerTileOptions(accessToken='4szQK8qDpn6FyJKGDjggzDvo9O9qRmgWRrKRtre2nWgqJ5PFPaBcztuNUFPPM2SW')) %>%\n        addCircleMarkers(~lon, ~lat, \n                         fillColor = ~mypalette(showavgo), fillOpacity = 0.7, color=\"white\", radius=8, stroke=FALSE,\n                         label = mytext,\n                         labelOptions = labelOptions( style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"), textsize = \"13px\", direction = \"auto\")\n        ) %>%\n        addLegend( pal=mypalette, values=~showavgo, opacity=1, title = \"Overlap Percentage <\/br> Average: 0.57\", position = \"bottomright\" )\n    })\n    \n    output$dleaf <- renderLeaflet({\n      leaflet(show_sets) %>% \n        addTiles()  %>% \n        setView( lat=36, lng=-44 , zoom=2) %>%\n        addProviderTiles(\"Jawg.Light\", options = providerTileOptions(accessToken='4szQK8qDpn6FyJKGDjggzDvo9O9qRmgWRrKRtre2nWgqJ5PFPaBcztuNUFPPM2SW')) %>%\n        addCircleMarkers(~lon, ~lat, \n                         fillColor = ~color,fillOpacity = 0.7, color=\"white\", radius=6, stroke=T,\n                         label = mytextdc,\n                         labelOptions = labelOptions( style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"), textsize = \"13px\", direction = \"auto\")\n        )\n    })\n      \n    }\n\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
